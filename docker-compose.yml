services:
  job-service:
    build:
      context: ./services/job-service
      dockerfile: Dockerfile
    depends_on:
      - mongodb
      - redis
      - zookeeper
      - kafka
    environment:
      - MONGO_URI=mongodb://mongodb:27017/jobdb
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - PORT=3002
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    ports:
      - "3002:3002"
    volumes:
      - ./services/job-service/logs:/app/logs
    networks:
      - job-network
    restart: on-failure
    command: sh -c "sleep 30 && npm start" # Wait 30 seconds for all services to be ready

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - job-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - job-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: 'ruok,stat,srvr,cons'
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
      # Remove the 8080 port line
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - job-network
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - job-network
    restart: on-failure

networks:
  job-network:
    name: linkedinjobservices_job_network
    driver: bridge

volumes:
  mongo-data:
    name: linkedinjobservices_mongo_data
  redis-data:
    name: linkedinjobservices_redis_data
  kafka-data:
    name: linkedinjobservices_kafka_data
  zookeeper-data:
    name: linkedinjobservices_zookeeper_data
  zookeeper-logs:
    name: linkedinjobservices_zookeeper_logs